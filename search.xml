<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>java-static块</title>
      <link href="/endBlogs/2019/03/26/java-static%E5%9D%97/"/>
      <url>/endBlogs/2019/03/26/java-static%E5%9D%97/</url>
      <content type="html"><![CDATA[<h4 id="static块"><a href="#static块" class="headerlink" title="static块"></a><code>static块</code></h4><p><code>static{}</code>，会<strong>在类被加载的时候执行且仅会被执行一次</strong>，一般用来初始化静态变量和调用静态方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStatic</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p><br></p><h4 id="类加载特性"><a href="#类加载特性" class="headerlink" title="类加载特性"></a>类加载特性</h4><ol><li>在虚拟机的生命周期中一个类只被加载一次</li><li>类加载的原则：延迟加载，能少加载就少加载，因为虚拟机的空间是有限的</li></ol><p><br></p><h4 id="类加载的时机"><a href="#类加载的时机" class="headerlink" title="类加载的时机"></a>类加载的时机</h4><ol><li>第一次创建对象要加载类</li><li>调用静态方法时要加载类,访问静态属性时会加载类</li><li>加载子类时必定会先加载父类</li><li>创建对象引用不加载类</li><li><p>子类调用父类的静态方法时</p><ol><li>当子类没有覆盖父类的静态方法时，只加载父类，不加载子类</li><li>当子类有覆盖父类的静态方法时，既加载父类，又加载子类</li></ol></li><li><p>访问静态常量，如果编译器可以计算出常量的值，则不会加载类,例如:<code>public static final int a =123;</code>否则会加载类,例如:<code>public static final int a = math.PI</code>。</p></li></ol><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> static </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>redis入门</title>
      <link href="/endBlogs/2019/03/22/redis%E5%85%A5%E9%97%A8/"/>
      <url>/endBlogs/2019/03/22/redis%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h4 id="Redis-配置"><a href="#Redis-配置" class="headerlink" title="Redis 配置"></a>Redis 配置</h4><p>服务端：<code>redis-server</code></p><p>客户端：<code>redis-cli</code></p><p>通过 <code>CONFIG</code>命令查看或设置配置项</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查看：CONFIG GET CONFIG_SETTING_NAME</span><br><span class="line">CONFIG GET loglevel</span><br><span class="line">CONFIG GET * # 使用 * 号获取所有配置项</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 配置：CONFIG SET CONFIG_SETTING_NAME NEW_CONFIG_VALUE</span><br><span class="line">CONFIG SET loglevel "notice"</span><br></pre></td></tr></table></figure><a id="more"></a><p><br></p><h4 id="Redis-数据类型"><a href="#Redis-数据类型" class="headerlink" title="Redis 数据类型"></a>Redis 数据类型</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> String（字符串）</span><br><span class="line"><span class="meta">#</span> string 类型是二进制安全的，可以包含jpg图片或者序列化的对象</span><br><span class="line"><span class="meta">#</span> 一个键最大能存储512MB</span><br><span class="line">SET name "runoob" # SET key value</span><br><span class="line">GET name # GET key</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Hash（哈希）</span><br><span class="line">HMSET myhash field1 "Hello" field2 "World"</span><br><span class="line">HGET myhash field1</span><br><span class="line">HGET myhash field2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> List（列表）</span><br><span class="line">lpush runoob redis</span><br><span class="line">lpush runoob mongodb</span><br><span class="line">lpush runoob rabitmq</span><br><span class="line">lrange runoob 0 10</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Set（集合）</span><br><span class="line"><span class="meta">#</span> 成功返回1，如果元素已经在集合中返回 0</span><br><span class="line">sadd runoob redis</span><br><span class="line">sadd runoob mongodb</span><br><span class="line">sadd runoob rabitmq</span><br><span class="line">sadd runoob rabitmq # 重复</span><br><span class="line">smembers runoob</span><br></pre></td></tr></table></figure><p><br></p><h4 id="Java-使用-Redis"><a href="#Java-使用-Redis" class="headerlink" title="Java 使用 Redis"></a>Java 使用 Redis</h4><h5 id="Redis-Java-String-字符串-实例"><a href="#Redis-Java-String-字符串-实例" class="headerlink" title="Redis Java String(字符串) 实例"></a>Redis Java String(字符串) 实例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisStringJava</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//连接本地的 Redis 服务</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"localhost"</span>);</span><br><span class="line">        System.out.println(<span class="string">"连接成功"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//设置 redis 字符串数据</span></span><br><span class="line">        jedis.set(<span class="string">"runoobkey"</span>, <span class="string">"www.runoob.com"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取存储的数据并输出</span></span><br><span class="line">        System.out.println(<span class="string">"redis 存储的字符串为: "</span>+ jedis.get(<span class="string">"runoobkey"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h5 id="Redis-Java-List-列表-实例"><a href="#Redis-Java-List-列表-实例" class="headerlink" title="Redis Java List(列表) 实例"></a>Redis Java List(列表) 实例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisListJava</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//连接本地的 Redis 服务</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"localhost"</span>);</span><br><span class="line">        System.out.println(<span class="string">"连接成功"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//存储数据到列表中</span></span><br><span class="line">        jedis.lpush(<span class="string">"site-list"</span>, <span class="string">"Runoob"</span>);</span><br><span class="line">        jedis.lpush(<span class="string">"site-list"</span>, <span class="string">"Google"</span>);</span><br><span class="line">        jedis.lpush(<span class="string">"site-list"</span>, <span class="string">"Taobao"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取存储的数据并输出</span></span><br><span class="line">        List&lt;String&gt; list = jedis.lrange(<span class="string">"site-list"</span>, <span class="number">0</span> ,<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;list.size(); i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"列表项为: "</span>+list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h5 id="Redis-Java-Keys-实例"><a href="#Redis-Java-Keys-实例" class="headerlink" title="Redis Java Keys 实例"></a>Redis Java Keys 实例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisKeyJava</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//连接本地的 Redis 服务</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"localhost"</span>);</span><br><span class="line">        System.out.println(<span class="string">"连接成功"</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 获取数据并输出</span></span><br><span class="line">        Set&lt;String&gt; keys = jedis.keys(<span class="string">"*"</span>); </span><br><span class="line">        Iterator&lt;String&gt; it=keys.iterator() ;   </span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;   </span><br><span class="line">            String key = it.next();   </span><br><span class="line">            System.out.println(key);   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line">1. Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程</span><br><span class="line"></span><br><span class="line">    daemonize no</span><br><span class="line"></span><br><span class="line">2. 当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定</span><br><span class="line"></span><br><span class="line">    pidfile /var/run/redis.pid</span><br><span class="line"></span><br><span class="line">3. 指定Redis监听端口，默认端口为6379</span><br><span class="line"></span><br><span class="line">    port 6379</span><br><span class="line"></span><br><span class="line">4. 绑定的主机地址</span><br><span class="line"></span><br><span class="line">    bind 127.0.0.1</span><br><span class="line"></span><br><span class="line">5. 当客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能</span><br><span class="line"></span><br><span class="line">    timeout 300</span><br><span class="line"></span><br><span class="line">6. 指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose</span><br><span class="line"></span><br><span class="line">    loglevel verbose</span><br><span class="line"></span><br><span class="line">7. 日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给/dev/null</span><br><span class="line"></span><br><span class="line">    logfile stdout</span><br><span class="line"></span><br><span class="line">8.  设置数据库的数量，默认数据库为0，可以使用SELECT &lt;dbid&gt;命令在连接上指定数据库id</span><br><span class="line"></span><br><span class="line">    databases 16</span><br><span class="line"></span><br><span class="line">9. 指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合</span><br><span class="line"></span><br><span class="line">    save &lt;seconds&gt; &lt;changes&gt;</span><br><span class="line"></span><br><span class="line">    Redis默认配置文件中提供了三个条件：</span><br><span class="line"></span><br><span class="line">    save 900 1</span><br><span class="line"></span><br><span class="line">    save 300 10</span><br><span class="line"></span><br><span class="line">    save 60 10000</span><br><span class="line"></span><br><span class="line">    分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">10. 指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大</span><br><span class="line"></span><br><span class="line">    rdbcompression yes</span><br><span class="line"></span><br><span class="line">11. 指定本地数据库文件名，默认值为dump.rdb</span><br><span class="line"></span><br><span class="line">    dbfilename dump.rdb</span><br><span class="line"></span><br><span class="line">12. 指定本地数据库存放目录</span><br><span class="line"></span><br><span class="line">    dir ./</span><br><span class="line"></span><br><span class="line">13. 设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步</span><br><span class="line"></span><br><span class="line">    slaveof &lt;masterip&gt; &lt;masterport&gt;</span><br><span class="line"></span><br><span class="line">14. 当master服务设置了密码保护时，slav服务连接master的密码</span><br><span class="line"></span><br><span class="line">    masterauth &lt;master-password&gt;</span><br><span class="line"></span><br><span class="line">15. 设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH &lt;password&gt;命令提供密码，默认关闭</span><br><span class="line"></span><br><span class="line">    requirepass foobared</span><br><span class="line"></span><br><span class="line">16. 设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息</span><br><span class="line"></span><br><span class="line">    maxclients 128</span><br><span class="line"></span><br><span class="line">17. 指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区</span><br><span class="line"></span><br><span class="line">    maxmemory &lt;bytes&gt;</span><br><span class="line"></span><br><span class="line">18. 指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no</span><br><span class="line"></span><br><span class="line">    appendonly no</span><br><span class="line"></span><br><span class="line">19. 指定更新日志文件名，默认为appendonly.aof</span><br><span class="line"></span><br><span class="line">     appendfilename appendonly.aof</span><br><span class="line"></span><br><span class="line">20. 指定更新日志条件，共有3个可选值： </span><br><span class="line">    no：表示等操作系统进行数据缓存同步到磁盘（快） </span><br><span class="line">    always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全） </span><br><span class="line">    everysec：表示每秒同步一次（折中，默认值）</span><br><span class="line"></span><br><span class="line">    appendfsync everysec</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">21. 指定是否启用虚拟内存机制，默认值为no，简单的介绍一下，VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析Redis的VM机制）</span><br><span class="line"></span><br><span class="line">     vm-enabled no</span><br><span class="line"></span><br><span class="line">22. 虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享</span><br><span class="line"></span><br><span class="line">     vm-swap-file /tmp/redis.swap</span><br><span class="line"></span><br><span class="line">23. 将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的(Redis的索引数据 就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0</span><br><span class="line"></span><br><span class="line">     vm-max-memory 0</span><br><span class="line"></span><br><span class="line">24. Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page大小最好设置为32或者64bytes；如果存储很大大对象，则可以使用更大的page，如果不 确定，就使用默认值</span><br><span class="line"></span><br><span class="line">     vm-page-size 32</span><br><span class="line"></span><br><span class="line">25. 设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，，在磁盘上每8个pages将消耗1byte的内存。</span><br><span class="line"></span><br><span class="line">     vm-pages 134217728</span><br><span class="line"></span><br><span class="line">26. 设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4</span><br><span class="line"></span><br><span class="line">     vm-max-threads 4</span><br><span class="line"></span><br><span class="line">27. 设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启</span><br><span class="line"></span><br><span class="line">    glueoutputbuf yes</span><br><span class="line"></span><br><span class="line">28. 指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法</span><br><span class="line"></span><br><span class="line">    hash-max-zipmap-entries 64</span><br><span class="line"></span><br><span class="line">    hash-max-zipmap-value 512</span><br><span class="line"></span><br><span class="line">29. 指定是否激活重置哈希，默认为开启（后面在介绍Redis的哈希算法时具体介绍）</span><br><span class="line"></span><br><span class="line">    activerehashing yes</span><br><span class="line"></span><br><span class="line">30. 指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件</span><br><span class="line"></span><br><span class="line">    include /path/to/local.conf</span><br></pre></td></tr></table></figure><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数据库表格设计与范式</title>
      <link href="/endBlogs/2019/03/21/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E6%A0%BC%E8%AE%BE%E8%AE%A1%E4%B8%8E%E8%8C%83%E5%BC%8F/"/>
      <url>/endBlogs/2019/03/21/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E6%A0%BC%E8%AE%BE%E8%AE%A1%E4%B8%8E%E8%8C%83%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h4 id="一、表设计"><a href="#一、表设计" class="headerlink" title="一、表设计"></a>一、表设计</h4><p> 数据库实体间是<code>一对多、多对多</code>关系时，如何进行表设计：</p><ul><li><code>一对多</code>：添加外键</li><li><code>多对多</code> ：建立关系表</li></ul><p>注：</p><ul><li><strong>添加外键</strong>时，尽量只<strong>记录外键</strong>，<strong>不创建外键约束</strong></li><li>推荐业务层级的约束，慎重使用数据库层级的约束，为表结构的重构提供可能性</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 慎重</span><br><span class="line">foreign key(member_id) references member (id);</span><br></pre></td></tr></table></figure><p><br></p><h5 id="业务层级约束"><a href="#业务层级约束" class="headerlink" title="业务层级约束"></a>业务层级约束</h5><ol><li><p>物理删除</p><p>删除数据时，手动查看当前数据<strong>主键被引用的情况</strong></p><ul><li>存在引用，不能删除</li><li>不存在引用，可以删除</li></ul><p>注：主键可能会被新增的表引用，因此每新增一个引用，都需要添加一种<strong>查看引用情况</strong>的逻辑</p></li></ol><p><br></p><ol start="2"><li><p>非物理删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 使用status字段，表示数据的可用状态</span><br><span class="line"># 被其他表引用时，不添加外键约束</span><br><span class="line"># 删除数据时，不用考虑被其他表引用，从而导致数据不一致的情况</span><br><span class="line">status =  1： 可用。可执行操作包括，删、查、改</span><br><span class="line">status =  0： 不可用。可执行操作包括，删、查、改</span><br><span class="line">status = -1： 已删除。执行操作包括，查、改(只允许修改status字段)</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><p><br></p><h4 id="二、范式"><a href="#二、范式" class="headerlink" title="二、范式"></a>二、范式</h4><h5 id="第一范式："><a href="#第一范式：" class="headerlink" title="第一范式："></a>第一范式：</h5><p>如果数据库表中的所有字段值都是不可分解的原子值，就说明该数据库表满足了第一范式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">地址：可以拆分为省、市、区、详细地址</span><br></pre></td></tr></table></figure><p><br></p><h5 id="第二范式："><a href="#第二范式：" class="headerlink" title="第二范式："></a>第二范式：</h5><p>第二范式在第一范式的基础之上更进一层。</p><p>第二范式需要确保数据库表中的<strong>每一列都和主键相关，而不能只与主键的某一部分相关</strong>，主要针对<strong>联合主键</strong>而言。</p><p>也就是说在一个数据库表中，一个表中只能保存一种数据，不可以把多种数据保存在同一张数据库表中。</p><p><br></p><h5 id="第三范式："><a href="#第三范式：" class="headerlink" title="第三范式："></a>第三范式：</h5><p>第三范式需要确保数据表中的每一列数据都和主键直接相关，而不能间接相关。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 通过a不能直接获取c</span><br><span class="line">a--&gt; b --&gt; c</span><br></pre></td></tr></table></figure><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> 范式 </tag>
            
            <tag> 多对多 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SpringDataJPA-JpaRepository方法</title>
      <link href="/endBlogs/2019/03/19/SpringDataJPA-JpaRepository%E6%96%B9%E6%B3%95/"/>
      <url>/endBlogs/2019/03/19/SpringDataJPA-JpaRepository%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h5 id="解析方法名创建查询"><a href="#解析方法名创建查询" class="headerlink" title="解析方法名创建查询"></a>解析方法名创建查询</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find + 全局修饰 + By + 实体的属性名称 + 限定词 + 连接词</span><br><span class="line"> + …(其它实体属性) + OrderBy + 排序属性 + 排序方向</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分页查询出符合姓名的记录,同理Sort也可以直接加上</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findByName</span><span class="params">(String name, Pageable pageable)</span></span>;</span><br></pre></td></tr></table></figure><a id="more"></a><p><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">全局修饰： Distinct， Top， First</span><br><span class="line"></span><br><span class="line">关键词： IsNull， IsNotNull， Like， NotLike， Containing， In， NotIn，</span><br><span class="line"></span><br><span class="line">IgnoreCase， Between， Equals， LessThan， GreaterThan， After， Before…</span><br><span class="line"></span><br><span class="line">排序方向： Asc， Desc</span><br><span class="line"></span><br><span class="line">连接词： And， Or</span><br><span class="line"></span><br><span class="line">And — 等价于 SQL 中的 and 关键字，比如 findByUsernameAndPassword(String user, Striang pwd)；</span><br><span class="line"></span><br><span class="line">Or — 等价于 SQL 中的 or 关键字，比如 findByUsernameOrAddress(String user, String addr)；</span><br><span class="line"></span><br><span class="line">Between — 等价于 SQL 中的 between 关键字，比如 findBySalaryBetween(int max, int min)；</span><br><span class="line"></span><br><span class="line">LessThan — 等价于 SQL 中的 “&lt;”，比如 findBySalaryLessThan(int max)；</span><br><span class="line"></span><br><span class="line">GreaterThan — 等价于 SQL 中的”&gt;”，比如 findBySalaryGreaterThan(int min)；</span><br><span class="line"></span><br><span class="line">IsNull — 等价于 SQL 中的 “is null”，比如 findByUsernameIsNull()；</span><br><span class="line"></span><br><span class="line">IsNotNull — 等价于 SQL 中的 “is not null”，比如 findByUsernameIsNotNull()；</span><br><span class="line"></span><br><span class="line">NotNull — 与 IsNotNull 等价；</span><br><span class="line"></span><br><span class="line">Like — 等价于 SQL 中的 “like”，比如 findByUsernameLike(String user)；</span><br><span class="line"></span><br><span class="line">NotLike — 等价于 SQL 中的 “not like”，比如 findByUsernameNotLike(String user)；</span><br><span class="line"></span><br><span class="line">OrderBy — 等价于 SQL 中的 “order by”，比如 findByUsernameOrderBySalaryAsc(String user)；</span><br><span class="line"></span><br><span class="line">Not — 等价于 SQL 中的 “！ =”，比如 findByUsernameNot(String user)；</span><br><span class="line"></span><br><span class="line">In — 等价于 SQL 中的 “in”，比如 findByUsernameIn(Collection userList) ，方法的参数可以是 Collection 类型，也可以是数组或者不定长参数；</span><br><span class="line"></span><br><span class="line">NotIn — 等价于 SQL 中的 “not in”，比如 findByUsernameNotIn(Collection userList) ，方法的参数可以是 Collection 类型，也可以是数组或者不定长参数；</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> JPA </tag>
            
            <tag> Spring </tag>
            
            <tag> Repository </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SpringDataJPA-Query注解</title>
      <link href="/endBlogs/2019/03/19/SpringDataJPA-Query%E6%B3%A8%E8%A7%A3/"/>
      <url>/endBlogs/2019/03/19/SpringDataJPA-Query%E6%B3%A8%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p><code>@Query</code>注解查询适用于所查询的数据无法通过关键字查询得到结果的查询。这种查询可以摆脱像关键字查询那样的约束，将查询直接在相应的接口方法中声明，结构更为清晰，这是<code>Spring Data</code>的特有实现。</p><p><br></p><h5 id="一、索引参数"><a href="#一、索引参数" class="headerlink" title="一、索引参数"></a>一、索引参数</h5><p>索引参数：索引值从1开始，查询中<code>?X</code>个数需要与方法定义的参数个数相一致，并且顺序也要一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Query</span>(<span class="string">"SELECT p FROM Person p WHERE p.lastName = ?1 AND p.email = ?2"</span>)</span><br><span class="line"><span class="function">List&lt;Person&gt; <span class="title">testQueryAnnotationParams1</span><span class="params">(String lastName, String email)</span></span>;</span><br></pre></td></tr></table></figure><p>注释：上面代码中的<code>?1 、?2</code>表示参数的占位符，需要和方法中所传递的参数顺序一致。<code>X</code>是从<code>1</code>开始。</p><p><br></p><h5 id="二、命名参数"><a href="#二、命名参数" class="headerlink" title="二、命名参数"></a>二、命名参数</h5><p>命名参数：可以定义好参数名，赋值时使用<code>@Param(&quot;参数名&quot;)</code>，而不用管顺序-推荐使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为@Query注解传递参数的方式1：命名参数</span></span><br><span class="line"><span class="meta">@Query</span>(<span class="string">"SELECT p FROM Person p WHERE p.lastName = :lastName AND p.email = :email"</span>)</span><br><span class="line"><span class="function">List&lt;Person&gt; <span class="title">testQueryAnnotationParams2</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @Param(<span class="string">"email"</span>)</span> String email, </span></span><br><span class="line"><span class="function">    @<span class="title">Param</span><span class="params">(<span class="string">"lastName"</span>)</span> String lastName)</span>;</span><br></pre></td></tr></table></figure><p>注释：<code>:lastName</code> 、<code>:email</code>表示为参数命名，方法中所传递的参数使用<code>@Param</code>注解标识命名参数。这种方式不用管参数的顺序。</p><p><br></p><a id="more"></a><h5 id="三、原生SQL进行查询"><a href="#三、原生SQL进行查询" class="headerlink" title="三、原生SQL进行查询"></a>三、原生SQL进行查询</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Query</span>(value = <span class="string">"SELECT count(id) FROM jpa_persons"</span>, nativeQuery = <span class="keyword">true</span>)</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">getTotalCount</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Query</span>(nativeQuery = <span class="keyword">true</span>,</span><br><span class="line">        value = <span class="string">"select * from user where name LIKE CONCAT('%', :file_name, '%')"</span>)</span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findByFileName</span><span class="params">(@Param(<span class="string">"file_name"</span>)</span> String file_name)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Query</span>(nativeQuery = <span class="keyword">true</span>, value = <span class="string">"select * from user where name LIKE %:file_name%"</span>)</span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findByFileName</span><span class="params">(@Param(<span class="string">"file_name"</span>)</span> String file_name)</span>;</span><br></pre></td></tr></table></figure><p>注释：</p><ul><li>当设置<code>nativeQuery=true</code>即可以使用<code>原生SQL</code>进行查询</li><li><code>like</code>查询：<code>LIKE CONCAT(&#39;%&#39;, :file_name, &#39;%&#39;)</code></li></ul><p><br></p><h5 id="四、-Modifying注解"><a href="#四、-Modifying注解" class="headerlink" title="四、@Modifying注解"></a>四、<code>@Modifying</code>注解</h5><ol><li>在<code>@Query</code>注解中编写<code>JPQL</code>实现<code>DELETE</code>和<code>UPDATE</code>操作的时候必须加上<code>@modifying</code>注解，以通知<code>Spring Data</code>这是一个<code>DELETE</code>或<code>UPDATE</code>操作。</li><li><code>UPDATE</code>或者<code>DELETE</code>操作需要使用<strong>事务</strong>，此时需要定义<code>Service</code>层，在<code>Service</code>层的方法上添加<code>@Transactional</code>。</li><li>注意<code>JPQL</code>不支持<code>INSERT</code>操作。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Modifying</span></span><br><span class="line"><span class="meta">@Query</span>(<span class="string">"UPDATE Person p SET p.email = :email WHERE p.id = :id"</span>)</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updatePersonEmail</span><span class="params">(@Param(<span class="string">"id"</span>)</span> Integer id, @<span class="title">Param</span><span class="params">(<span class="string">"email"</span>)</span> String email)</span>;</span><br></pre></td></tr></table></figure><p><br></p><h4 id="五、EntityManager"><a href="#五、EntityManager" class="headerlink" title="五、EntityManager"></a>五、EntityManager</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EpsmSubjectRepositoryImpl</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PersistenceContext</span></span><br><span class="line">    EntityManager entityManager;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List &lt; EpsmSubject &gt; findEpsmSubjectList(</span><br><span class="line">        Long catalogId, String subjectName, Long start, Long pageSize) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 构造sql语句</span></span><br><span class="line">        StringBuffer sql = <span class="keyword">new</span> StringBuffer(<span class="string">"SELECT * FROM t_epsm_subject where 1 = 1 "</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (catalogId != <span class="keyword">null</span>) &#123;</span><br><span class="line">            sql.append(<span class="string">" and catalog_id = :catalogId "</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(subjectName)) &#123;</span><br><span class="line">            sql.append(<span class="string">" and subject_name like CONCAT('%', :subjectName, '%')"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sql.append(<span class="string">" order by created_time DESC"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (start != <span class="keyword">null</span> &amp;&amp; pageSize != <span class="keyword">null</span>) &#123;</span><br><span class="line">            sql.append(<span class="string">" limit :start , :pageSize"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Query query = entityManager.createNativeQuery(sql.toString(), EpsmSubject.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 填充查询参数</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (catalogId != <span class="keyword">null</span>) &#123;</span><br><span class="line">            query.setParameter(<span class="string">"catalogId"</span>, catalogId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(subjectName)) &#123;</span><br><span class="line">            query.setParameter(<span class="string">"subjectName"</span>, subjectName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (start != <span class="keyword">null</span> &amp;&amp; pageSize != <span class="keyword">null</span>) &#123;</span><br><span class="line">            query.setParameter(<span class="string">"start"</span>, start);</span><br><span class="line">            query.setParameter(<span class="string">"pageSize"</span>, pageSize);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> query.getResultList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> Query </tag>
            
            <tag> Modifying </tag>
            
            <tag> Transactional </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>beans标签与属性</title>
      <link href="/endBlogs/2019/03/19/beans%E6%A0%87%E7%AD%BE%E4%B8%8E%E5%B1%9E%E6%80%A7/"/>
      <url>/endBlogs/2019/03/19/beans%E6%A0%87%E7%AD%BE%E4%B8%8E%E5%B1%9E%E6%80%A7/</url>
      <content type="html"><![CDATA[<p>####<code>&lt;beans&gt;</code>标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans  </span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><h5 id="xmls"><a href="#xmls" class="headerlink" title="xmls"></a><code>xmls</code></h5></li></ul><p><code>xmlns</code>是<code>XMLnameSpace</code>的缩写，<code>xml</code>的<strong>标签名称</strong>是自定义的，可能会和其他人的标签重名，而功能却不一样，所以需要加一个<code>namespace</code>来区分，类似<code>Java</code>中<code>package</code> 。</p><ul><li><h5 id="xmlns-xsi"><a href="#xmlns-xsi" class="headerlink" title="xmlns:xsi"></a><code>xmlns:xsi</code></h5></li></ul><p>是指<code>xml文件</code>遵守<code>xml规范</code>，<code>xsi</code>全名：<code>xml schema instance</code> ，是指具体用到<code>schema</code>资源文件里定义的规范所遵守的规范。即<code>/spring-beans-2.0.xsd</code>这个文件里定义的元素遵守什么标准</p><ul><li><h5 id="xsi-schemaLaction"><a href="#xsi-schemaLaction" class="headerlink" title="xsi:schemaLaction"></a><code>xsi:schemaLaction</code></h5></li></ul><p><code>schemalLaction</code>属性来引用<code>（schema）</code>模式文档，解析器可以在需要的情况下使用这个文档对xml实例文档进行校验。它的值（URL）是成对出现的，第一个值表示命名空间，第二个值则表示描述该命名空间的模式文档的具体位置，两个值之间以空格分隔。</p><a id="more"></a><p><br></p><h4 id="lt-bean-gt-标签"><a href="#lt-bean-gt-标签" class="headerlink" title="&lt;bean&gt;标签"></a><code>&lt;bean&gt;</code>标签</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 空参构造创建 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"logDao"</span> <span class="attr">name</span>=<span class="string">"logDaoName"</span> <span class="attr">class</span>=<span class="string">"com.sjtu.bean.LogDao"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.sjtu.bean.dataSource"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 值类型注入：为dataSource对象中名为user的属性注入root作为值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.sjtu.bean..LogonService"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引用类型注入：为logDao属性注入logDao对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"logDao"</span> <span class="attr">ref</span>=<span class="string">"logDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- 准备带有参数的构造 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.sjtu.bean.User"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- name属性：构造函数参数名 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- index属性：构造函数参数索引  --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- type属性：构造函数参数类型 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 上述三个属性不必全部出现，根据情况选择即可 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">value</span>=<span class="string">"Jerry"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">index</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">type</span>=<span class="string">"java.lang.String"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"car"</span> <span class="attr">ref</span>=<span class="string">"car"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p><code>id</code>是<code>bean</code>的标识符，必须唯一。如果没有配置<code>id</code>，<code>name</code>默认为标识符</p></li><li><p>如果配置了<code>id</code>和<code>name</code>，那么<code>name</code>为别名。</p></li><li><p><code>name</code>可以设置多个别名，分隔符可以是<code>空格、逗号、分号</code></p></li><li><p><code>class</code>是<code>bean</code>的<strong>全限定名</strong>，即<code>包名+类名</code>。如果不配置<code>id</code>和<code>name</code>，那么可以根据<code>applicationContext.getbean(Class)</code>获取对象</p></li><li><p><code>autowire</code> 自动装配 用于简化<code>spring</code>的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">byname: 根据名称去查找相应的bean,发现了则装载上</span><br><span class="line">bytype: 根据类型自动装配,不用去管id,但同一种类型的bean只能有一个,否则报错</span><br><span class="line">constructor：当通过构造器注入实例化bean时,装配构造方法</span><br></pre></td></tr></table></figure></li><li><p><code>scope</code>作用域</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">singleton: 单例的,整个容器只产生一个对象,默认是单例</span><br><span class="line">prototype: 原型,每次获取bean都创建一个新对象</span><br><span class="line">request: 每次请求时创建一个新的对象</span><br><span class="line">session: 在一个会话范围内只产生一个对象</span><br><span class="line">application: 在应用范围内是一个对象</span><br></pre></td></tr></table></figure></li></ul><p><br></p><h4 id="分层次"><a href="#分层次" class="headerlink" title="分层次"></a>分层次</h4><p>程序严格来讲分为四个层次：</p><ul><li><code>显示层：VO类</code></li><li><p><code>控制层：Controller类</code></p></li><li><p><code>业务层：Service类</code></p></li><li><p><code>数据层：</code></p><ul><li><code>表：Entity类 || PO类</code></li><li><code>CURD：DAO类）</code> </li></ul></li></ul><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> beans </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java反射</title>
      <link href="/endBlogs/2019/03/18/java%E5%8F%8D%E5%B0%84/"/>
      <url>/endBlogs/2019/03/18/java%E5%8F%8D%E5%B0%84/</url>
      <content type="html"><![CDATA[<h4 id="一、java-的反射机制"><a href="#一、java-的反射机制" class="headerlink" title="一、java 的反射机制"></a>一、java 的反射机制</h4><p>Java 反射机制在程序<strong>运行时</strong>，对于<strong>任意一个类</strong>，都能够知道这个类的所有属性和方法；对于<strong>任意一个对象</strong>，都能够调用它的任意一个方法和属性。这种 <strong>动态的获取信息</strong> 以及 <strong>动态调用对象的方法</strong> 的功能称为 <strong>java 的反射机制</strong>。</p><p>注：反射机制很重要的一点就是“运行时”，其使得我们可以在程序运行时加载、探索以及使用编译期间完全未知的 <code>.class</code> 文件。</p><a id="more"></a><p><br></p><h4 id="二、获取类的信息"><a href="#二、获取类的信息" class="headerlink" title="二、获取类的信息"></a>二、获取类的信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FatherClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String mFatherName;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> mFatherAge;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printFatherMsg</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SonClass</span> <span class="keyword">extends</span> <span class="title">FatherClass</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String mSonName;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> mSonAge;</span><br><span class="line">    <span class="keyword">public</span> String mSonBirthday;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printSonMsg</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Son Msg - name : "</span></span><br><span class="line">                + mSonName + <span class="string">"; age : "</span> + mSonAge);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setSonName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        mSonName = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setSonAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        mSonAge = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getSonAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mSonAge;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getSonName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mSonName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printFields</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.获取并输出类的名称</span></span><br><span class="line">    Class mClass = SonClass.class;</span><br><span class="line">    System.out.println(<span class="string">"类的名称："</span> + mClass.getName());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.1 获取所有 public 访问权限的变量</span></span><br><span class="line">    <span class="comment">// 包括本类声明的和从父类继承的</span></span><br><span class="line">    Field[] fields = mClass.getFields();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.2 获取所有本类声明的变量（不问访问权限）</span></span><br><span class="line">    <span class="comment">//Field[] fields = mClass.getDeclaredFields();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 遍历变量并输出变量信息</span></span><br><span class="line">    <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取访问权限(修饰符)并输出</span></span><br><span class="line">        <span class="keyword">int</span> modifiers = field.getModifiers();</span><br><span class="line">        System.out.print(Modifier.toString(modifiers) + <span class="string">" "</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//输出变量的类型及变量名</span></span><br><span class="line">        System.out.println(field.getType().getName()</span><br><span class="line">                 + <span class="string">" "</span> + field.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用 <code>getFields()</code> 方法，输出 SonClass 类以及其所继承的父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">类的名称：obj.SonClass</span><br><span class="line">public java.lang.String mSonBirthday</span><br><span class="line">public java.lang.String mFatherName</span><br><span class="line">public int mFatherAge</span><br></pre></td></tr></table></figure></p><p><br></p><p>调用<code>getDeclaredFields()</code>， 输出 SonClass 类的所有成员变量，不问访问权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">类的名称：obj.SonClass</span><br><span class="line">private java.lang.String mSonName</span><br><span class="line">protected int mSonAge</span><br><span class="line">public java.lang.String mSonBirthday</span><br></pre></td></tr></table></figure><p><br></p><p>注：</p><ul><li>获取变量信息：<code>getFields()</code> 、<code>getDeclaredFields()</code>、<code>getField()</code> 、<code>getDeclaredField()</code></li><li>获取方法信息：<code>getMethods()</code>、<code>getDeclaredMethods()</code>、<code>getMethod()</code>、<code>getDeclaredMethod()</code></li></ul><p><br></p><h4 id="三、私有变量和方法"><a href="#三、私有变量和方法" class="headerlink" title="三、私有变量和方法"></a>三、私有变量和方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String MSG = <span class="string">"Original"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">privateMethod</span><span class="params">(String head , <span class="keyword">int</span> tail)</span></span>&#123;</span><br><span class="line">        System.out.print(head + tail);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MSG;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getPrivateMethod</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">//1. 获取 Class 类实例</span></span><br><span class="line">    TestClass testClass = <span class="keyword">new</span> TestClass();</span><br><span class="line">    Class mClass = testClass.getClass();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 获取私有方法</span></span><br><span class="line">    <span class="comment">//第一个参数为要获取的私有方法的名称</span></span><br><span class="line">    <span class="comment">//第二个为要获取方法的参数的类型，参数为 Class...，没有参数就是null</span></span><br><span class="line">    <span class="comment">//方法参数也可这么写 ：new Class[]&#123;String.class , int.class&#125;</span></span><br><span class="line">    Method privateMethod =</span><br><span class="line">            mClass.getDeclaredMethod(<span class="string">"privateMethod"</span>, String.class, <span class="keyword">int</span>.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 开始操作方法</span></span><br><span class="line">    <span class="keyword">if</span> (privateMethod != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//获取私有方法的访问权</span></span><br><span class="line">        <span class="comment">//只是获取访问权，并不是修改实际权限</span></span><br><span class="line">        privateMethod.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用 invoke 反射调用私有方法</span></span><br><span class="line">        <span class="comment">//privateMethod 是获取到的私有方法</span></span><br><span class="line">        <span class="comment">//testClass 要操作的对象</span></span><br><span class="line">        <span class="comment">//后面两个参数传实参</span></span><br><span class="line">        privateMethod.invoke(testClass, <span class="string">"Java Reflect "</span>, <span class="number">666</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">modifyPrivateFiled</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//1. 获取 Class 类实例</span></span><br><span class="line">    TestClass testClass = <span class="keyword">new</span> TestClass();</span><br><span class="line">    Class mClass = testClass.getClass();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 获取私有变量</span></span><br><span class="line">    Field privateField = mClass.getDeclaredField(<span class="string">"MSG"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 操作私有变量</span></span><br><span class="line">    <span class="keyword">if</span> (privateField != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//获取私有变量的访问权</span></span><br><span class="line">        privateField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//修改私有变量，并输出以测试</span></span><br><span class="line">        System.out.println(<span class="string">"Before Modify：MSG = "</span> + testClass.getMsg());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用 set(object , value) 修改变量的值</span></span><br><span class="line">        <span class="comment">//privateField 是获取到的私有变量</span></span><br><span class="line">        <span class="comment">//testClass 要操作的对象</span></span><br><span class="line">        <span class="comment">//"Modified" 为要修改成的值</span></span><br><span class="line">        privateField.set(testClass, <span class="string">"Modified"</span>);</span><br><span class="line">        System.out.println(<span class="string">"After Modify：MSG = "</span> + testClass.getMsg());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：</p><ul><li><code>setAccessible(true)</code> 方法，是获取私有方法或变量的访问权限</li><li>用 <code>invoke()</code> 方法来调用方法</li></ul><p><br></p><h4 id="四、获得-Class-对象"><a href="#四、获得-Class-对象" class="headerlink" title="四、获得 Class 对象"></a>四、获得 Class 对象</h4><h5 id="1、使用-Class-类的-forName-静态方法"><a href="#1、使用-Class-类的-forName-静态方法" class="headerlink" title="1、使用 Class 类的 forName 静态方法"></a>1、使用 Class 类的 <code>forName</code> 静态方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; cls = Class.forName(<span class="string">"java.lang.String"</span>);</span><br></pre></td></tr></table></figure><h5 id="2、直接获取某一个类的-class"><a href="#2、直接获取某一个类的-class" class="headerlink" title="2、直接获取某一个类的 class"></a>2、直接获取某一个类的 class</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; klass = <span class="keyword">int</span>.class;</span><br></pre></td></tr></table></figure><h5 id="3、调用某个对象的-getClass-方法"><a href="#3、调用某个对象的-getClass-方法" class="headerlink" title="3、调用某个对象的 getClass() 方法"></a>3、调用某个对象的 <code>getClass()</code> 方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder str = <span class="keyword">new</span> StringBuilder(<span class="string">"123"</span>);</span><br><span class="line">Class&lt;?&gt; klass = str.getClass();</span><br></pre></td></tr></table></figure><p>注：</p><ul><li><code>Class&lt;T&gt;</code>在实例化的时候，<code>T</code>要替换成具体类</li><li><code>Class&lt;?&gt;</code>它是个通配泛型，<code>?</code>可以代表任何类型</li></ul><p><br></p><h4 id="五、创建实例"><a href="#五、创建实例" class="headerlink" title="五、创建实例"></a>五、创建实例</h4><ul><li><p>使用Class对象的<code>newInstance()</code>方法来创建Class对象对应类的实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; c = String.class;</span><br><span class="line">Object str = c.newInstance();</span><br></pre></td></tr></table></figure></li><li><p>先通过Class对象获取指定的<code>Constructor</code>对象，再调用<code>Constructor</code>对象的<code>newInstance()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取String所对应的Class对象</span></span><br><span class="line">Class&lt;?&gt; c = String.class;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取String类带一个String参数的构造器</span></span><br><span class="line">Constructor constructor = c.getConstructor(String.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据构造器创建实例</span></span><br><span class="line">Object obj = constructor.newInstance(<span class="string">"23333"</span>);</span><br><span class="line">System.out.println(obj);</span><br></pre></td></tr></table></figure><p>注：<code>getConstructor()</code> 获取构造器对象</p></li></ul><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Reflection </tag>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java注解</title>
      <link href="/endBlogs/2019/03/18/java%E6%B3%A8%E8%A7%A3/"/>
      <url>/endBlogs/2019/03/18/java%E6%B3%A8%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h4 id="一、认识注解"><a href="#一、认识注解" class="headerlink" title="一、认识注解"></a>一、认识注解</h4><p><code>JDK1.5</code>之后内部提供的三个注解</p><ul><li><code>@Deprecated</code> 意思是<strong>废弃的，过时的</strong></li><li><code>@Override</code> 意思是<strong>重写、覆盖</strong></li><li><code>@SuppressWarnings</code> 意思是“<strong>压缩警告</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这里就是注解，称为压缩警告，这是JDK内部自带的一个注解</span></span><br><span class="line">    <span class="comment">// 一个注解就是一个类，在这里使用了这个注解就是创建了SuppressWarnings类的一个实例对象</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">":deprecation"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.runFinalizersOnExit(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//这里的runFinalizersOnExit()方法画了一条横线表示此方法已经过时了，不建议使用了</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这也是JDK内部自带的一个注解，意思就是说这个方法已经废弃了，不建议使用了</span></span><br><span class="line">    <span class="meta">@Deprecated</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello world"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这也是JDK1.5之后内部提供的一个注解，意思就是要重写(覆盖)JDK内部的toString()方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello world"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：注解就相当于一个你的源程序要调用一个类，在源程序中应用某个注解，得事先准备好这个注解类</p><a id="more"></a><p><br></p><h4 id="二、自定义注解及其应用"><a href="#二、自定义注解及其应用" class="headerlink" title="二、自定义注解及其应用"></a>二、自定义注解及其应用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这是一个自定义的注解(Annotation)类，在定义注解(Annotation)类时使用了另一个注解类Retention</span></span><br><span class="line"><span class="comment"> * 在注解类上使用另一个注解类，那么被使用的注解类就称为元注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="comment">//Retention注解决定MyAnnotation注解的生命周期</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(&#123; ElementType.METHOD, ElementType.TYPE &#125;)</span><br><span class="line"><span class="comment">//Target注解决定MyAnnotation注解可以加在哪些成分上，如加在类、属性、方法身上等成分</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Retention(RetentionPolicy.SOURCE)</span></span><br><span class="line"><span class="comment"> * 这个注解的意思是让MyAnnotation注解只在java源文件中存在，编译成.class文件后注解就不存在了</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> * @Retention(RetentionPolicy.CLASS)</span></span><br><span class="line"><span class="comment"> * 这个注解的意思是让MyAnnotation注解在java源文件(.java文件)中存在，</span></span><br><span class="line"><span class="comment"> * 编译成.class文件后注解也还存在，被MyAnnotation注解类标识的类被类加载器加载到内存中后</span></span><br><span class="line"><span class="comment"> * MyAnnotation注解就不存在了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 这里是在注解类MyAnnotation上使用另一个注解类，这里的Retention称为元注解。</span></span><br><span class="line"><span class="comment"> * Retention注解括号中的"RetentionPolicy.RUNTIME"意思是让MyAnnotation这个注解的</span></span><br><span class="line"><span class="comment"> * 生命周期一直程序运行时都存在</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;&#125;</span><br></pre></td></tr></table></figure><h5 id="把自定义的注解加到某个类上："><a href="#把自定义的注解加到某个类上：" class="headerlink" title="把自定义的注解加到某个类上："></a>把自定义的注解加到某个类上：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@ MyAnnotation </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationUse</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><br></p><h5 id="用反射测试进行测试AnnotationUse的定义上是否有-MyAnnotation"><a href="#用反射测试进行测试AnnotationUse的定义上是否有-MyAnnotation" class="headerlink" title="用反射测试进行测试AnnotationUse的定义上是否有@MyAnnotation"></a>用<code>反射</code>测试进行测试<code>AnnotationUse</code>的定义上是否有<code>@MyAnnotation</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里是将新创建好的注解类MyAnnotation标记到AnnotaionTest类上</span></span><br><span class="line"><span class="meta">@MyAnnotation</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationUse</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这里是检查Annotation类是否有注解，这里需要使用反射才能完成对Annotation类的检查</span></span><br><span class="line">        <span class="keyword">if</span> (AnnotationUse.class.isAnnotationPresent(MyAnnotation.class)) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * MyAnnotation是一个类，这个类的实例对象annotation是通过反射得到的</span></span><br><span class="line"><span class="comment">             * 一旦在某个类上使用了@MyAnnotation，那么</span></span><br><span class="line"><span class="comment">             * 这个MyAnnotation类的实例对象annotation就会被创建出来了</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            MyAnnotation annotation = (MyAnnotation) AnnotationUse.class</span><br><span class="line">                .getAnnotation(MyAnnotation.class);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 打印MyAnnotation对象，这里输出的结果为：@cn.itcast.day2.MyAnnotation()</span></span><br><span class="line">            System.out.println(annotation);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h4 id="三、元注解（meta-annotation）"><a href="#三、元注解（meta-annotation）" class="headerlink" title="三、元注解（meta-annotation）"></a>三、元注解（meta-annotation）</h4><p><code>Java5.0</code>定义了4个标准的<code>meta-annotation</code>类型，它们被用来提供对其它 annotation类型作说明。</p><ul><li><code>@Target</code></li><li><code>@Retention</code></li><li><code>@Documented</code></li><li><code>@Inherited</code></li></ul><p><br></p><h5 id="1、-Target"><a href="#1、-Target" class="headerlink" title="1、@Target"></a><code>1、@Target</code></h5><p><code>@Target</code>说明了Annotation所修饰的对象范围（<strong>被描述的注解可以用在什么地方</strong>）</p><ul><li><code>CONSTRUCTOR</code>:用于描述构造器</li><li><code>FIELD</code>:用于描述域</li><li><code>LOCAL_VARIABLE</code>:用于描述局部变量</li><li><code>METHOD</code>:用于描述方法</li><li><code>PACKAGE</code>:用于描述包</li><li><code>PARAMETER</code>:用于描述参数</li><li><code>TYPE</code>:用于描述类、接口(包括注解类型) 或enum声明</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>( &#123; ElementType.METHOD, ElementType.TYPE &#125;)</span><br><span class="line"><span class="comment">// @Target(ElementType.FIELD)</span></span><br></pre></td></tr></table></figure><p><br></p><h5 id="2、-Retention"><a href="#2、-Retention" class="headerlink" title="2、@Retention"></a><code>2、@Retention</code></h5><p><code>@Retention</code>定义了该Annotation被保留的时间长短。</p><ul><li><code>SOURCE</code>:在源文件中有效（即源文件保留）</li><li><code>CLASS</code>:在class文件中有效（即class保留）</li><li><code>RUNTIME</code>:在运行时有效（即运行时保留）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br></pre></td></tr></table></figure><h5 id="2-1-声明周期"><a href="#2-1-声明周期" class="headerlink" title="2.1 声明周期"></a>2.1 声明周期</h5><p><strong>一个注解的生命周期有三个阶段：java源文件是一个阶段，class文件是一个阶段，内存中的字节码是一个阶段</strong>。javac把<code>源文件</code>编译成<code>.class文件</code>时，有可能去掉里面的注解，类加载器把<code>.class文件</code>加载到内存时也有可能去掉里面的注解。</p><p><br></p><h5 id="2-2-Java-API中是这样定义的-Deprecated的"><a href="#2-2-Java-API中是这样定义的-Deprecated的" class="headerlink" title="2.2 Java API中是这样定义的@Deprecated的"></a><code>2.2 Java API</code>中是这样定义的<code>@Deprecated</code>的</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(value=RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Deprecated</span><br></pre></td></tr></table></figure><p><br></p><h5 id="2-3-Java-API中是这样定义的-Override的"><a href="#2-3-Java-API中是这样定义的-Override的" class="headerlink" title="2.3 Java API中是这样定义的@Override的"></a><code>2.3 Java API中</code>是这样定义的<code>@Override</code>的</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(value=METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(value=SOURCE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Override</span><br></pre></td></tr></table></figure><p><code>@Override</code>是给<code>javac</code>看的，编译完以后就<code>@Override</code>注解就没有价值了</p><p><br></p><h5 id="2-4-Java-API中是这样定义的-SuppressWarnings的"><a href="#2-4-Java-API中是这样定义的-SuppressWarnings的" class="headerlink" title="2.4 Java API中是这样定义的@SuppressWarnings的"></a><code>2.4 Java API</code>中是这样定义的<code>@SuppressWarnings</code>的</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Target(value=&#123;TYPE,FIELD,METHOD,PARAMETER,CONSTRUCTOR,LOCAL_VARIABLE&#125;)</span><br><span class="line">@Retention(value=SOURCE)</span><br><span class="line">public @interface SuppressWarnings</span><br></pre></td></tr></table></figure><p><code>@SuppressWarnings</code>也是给<code>javac</code>看的</p><p><br></p><h5 id="3、-Documented"><a href="#3、-Documented" class="headerlink" title="3、@Documented"></a><code>3、@Documented</code></h5><p><code>@Documented</code>用于描述其它类型的annotation应该被作为被标注的程序成员的公共API，因此可以被例如<code>javadoc</code>此类的工具文档化。Documented是一个标记注解，没有成员。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.FIELD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Column &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> "fieldName"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">setFuncName</span><span class="params">()</span> <span class="keyword">default</span> "setField"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFuncName</span><span class="params">()</span> <span class="keyword">default</span> "getField"</span>; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">defaultDBValue</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h5 id="4、-Inherited"><a href="#4、-Inherited" class="headerlink" title="4、@Inherited"></a><code>4、@Inherited</code></h5><p><code>@Inherited</code> 元注解是一个标记注解，<code>@Inherited</code>阐述了某个被标注的类型是被继承的。如果一个使用了<code>@Inherited</code>修饰的annotation类型被用于一个class，则这个annotation将<strong>被用于该class的子类</strong>。</p><p><br></p><h4 id="四、为注解增加属性"><a href="#四、为注解增加属性" class="headerlink" title="四、为注解增加属性"></a>四、为注解增加属性</h4><p>注解可以看成是一种特殊的类，既然是类，那自然可以为类添加属性</p><h5 id="1、添加属性"><a href="#1、添加属性" class="headerlink" title="1、添加属性"></a><strong>1、添加属性</strong></h5><p>语法：<code>类型 属性名() default 默认值;</code> || <code>类型 属性名();</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="comment">// Retention注解决定MyAnnotation注解的生命周期</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(&#123; ElementType.METHOD, ElementType.TYPE &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    <span class="comment">// String color();</span></span><br><span class="line">    <span class="function">String <span class="title">color</span><span class="params">()</span> <span class="keyword">default</span> "blue"</span>; <span class="comment">// 为属性指定缺省值</span></span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>; <span class="comment">// 定义一个名称为value的属性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h5 id="2、应用属性"><a href="#2、应用属性" class="headerlink" title="2、应用属性"></a><strong>2、应用属性</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MyAnnotation</span>(color = <span class="string">"red"</span>) <span class="comment">//应用MyAnnotation注解的color属性</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAnnotationTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 用反射方式获得注解对应的实例对象后，在通过该对象调用属性对应的方法</span></span><br><span class="line">        MyAnnotation annotation = (MyAnnotation) MyAnnotationTest.class</span><br><span class="line">            .getAnnotation(MyAnnotation.class);</span><br><span class="line">        System.out.println(annotation.color()); <span class="comment">//输出red</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h5 id="3、value属性"><a href="#3、value属性" class="headerlink" title="3、value属性"></a><strong>3、value属性</strong></h5><p>如果一个注解中有一个名称为<code>value</code>的属性，且你只想设置value属性，那么可以省略掉<code>“value=”</code>部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</span><br><span class="line"><span class="meta">@MyAnnotation</span>(<span class="string">"hello world"</span>)</span><br></pre></td></tr></table></figure><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Annotation </tag>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring MVC注解</title>
      <link href="/endBlogs/2019/03/17/Spring%20MVC%E6%B3%A8%E8%A7%A3/"/>
      <url>/endBlogs/2019/03/17/Spring%20MVC%E6%B3%A8%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h4 id="注解类型"><a href="#注解类型" class="headerlink" title="注解类型"></a>注解类型</h4><p><code>handler method</code>参数绑定常用的注解，根据处理的<strong>Request内容部分</strong>不同分为四类：</p><ol><li><p>处理<code>requet uri</code> 部分的注解：<code>@PathVariable</code> </p><p>注：指<code>uri template</code>中<code>variable</code>，不含<code>queryString</code>部分</p></li><li><p>处理<code>request header</code>部分的注解：   <code>@RequestHeader</code>、<code>@CookieValue</code> </p></li><li>处理<code>request body</code>部分的注解：<code>@RequestParam</code>、<code>@RequestBody</code> </li><li>处理<code>attribute</code>类型是注解： <code>@SessionAttributes</code>、 <code>@ModelAttribute</code> </li></ol><p><br></p><a id="more"></a><h5 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a><code>@PathVariable</code></h5><p>当使用<code>@RequestMapping URI template</code> 样式映射时， 即 <code>someUrl/{paramId}</code>, 这时的<code>paramId</code>可通过 <code>@Pathvariable</code>注解<strong>绑定传过来的值到方法的参数上</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/owners/&#123;ownerId&#125;"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RelativePathUriTemplateController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// @RequestMapping("/pets/&#123;petId&#125;")</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/pets/&#123;petId&#125;"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findPet</span><span class="params">(@PathVariable String ownerId, @PathVariable String petId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// implementation omitted</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：若方法参数名称和需要绑定的<code>uri template中</code>变量名称不一致，需要在<code>@PathVariable(&quot;name&quot;)</code>指定<code>uri template</code>中的名称。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PathVariable</span>(<span class="string">"ownerId"</span>) String owner_id</span><br></pre></td></tr></table></figure><p><br></p><h5 id="RequestHeader"><a href="#RequestHeader" class="headerlink" title="@RequestHeader"></a><code>@RequestHeader</code></h5><p><code>@RequestHeader</code> 注解，可以把<code>Request</code>请求<code>header</code>部分的值绑定到方法的参数上</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Host                    localhost:8080</span><br><span class="line">Accept                  text/html,application/xhtml+xml,application/xml;q=0.9</span><br><span class="line">Accept-Language         fr,en-gb;q=0.7,en;q=0.3</span><br><span class="line">Accept-Encoding         gzip,deflate</span><br><span class="line">Accept-Charset          ISO-8859-1,utf-8;q=0.7,*;q=0.7</span><br><span class="line">Keep-Alive              300</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/displayHeaderInfo.do"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayHeaderInfo</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @RequestHeader(<span class="string">"Accept-Encoding"</span>)</span> String encoding,</span></span><br><span class="line"><span class="function">    @<span class="title">RequestHeader</span><span class="params">(<span class="string">"Keep-Alive"</span>)</span> <span class="keyword">long</span> keepAlive) </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h5 id="CookieValue"><a href="#CookieValue" class="headerlink" title="@CookieValue"></a><code>@CookieValue</code></h5><p><code>@CookieValue</code>可以把<code>Request header</code>中关于<code>cookie</code>的值绑定到方法的参数上</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSESSIONID=415A4AC178C59DACE0B2C9CA727CDD84</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/displayHeaderInfo.do"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayHeaderInfo</span><span class="params">(@CookieValue(<span class="string">"JSESSIONID"</span>)</span> String cookie) </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h5 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a><code>@RequestParam</code></h5><ul><li>常用来处理<strong>简单类型的绑定</strong>，通过<code>Request.getParameter()</code>获取的<code>String</code>可直接转换为简单类型的情况<ul><li>可以处理<code>get 方式</code>中<code>queryString</code>的值</li><li>可以处理<code>post方式</code>中<code>body data</code>的值</li></ul></li><li>用来处理<code>Content-Type</code>: 为 <code>application/x-www-form-urlencoded</code>编码的内容，提交方式<code>GET、POST</code> </li><li>该注解有两个属性： <code>value、required</code> <ul><li><code>value</code>用来指定要传入值的<code>id名称</code> </li><li><code>required</code>用来指示参数是否必须绑定</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/pets"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EditPetForm</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">setupForm</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        @RequestParam(value = <span class="string">"petId"</span>, required = <span class="keyword">false</span>)</span> <span class="keyword">int</span> petId) </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：可以不使用<code>@RequestParam</code>，直接接收。此时要求<code>controller方法</code>中的<strong>参数名称</strong>要一致</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/pets"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EditPetForm</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">setupForm</span><span class="params">(<span class="keyword">int</span> petId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h5 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a><code>@RequestBody</code></h5><p>常用来处理<code>Content-Type</code>: 不是<code>application/x-www-form-urlencoded</code>编码的内容</p><ul><li><code>application/json</code> </li><li><code>application/xml</code> </li></ul><p>使用<code>HandlerAdapter</code>配置的<code>HttpMessageConverters</code>来解析<code>post data body</code>，然后绑定到<code>bean</code>上</p><p><strong>字符串解析：</strong> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">"/login"</span>,</span><br><span class="line">    type: <span class="string">"POST"</span>,</span><br><span class="line">    data: <span class="string">'&#123;"userName":"admin","pwd","admin123"&#125;'</span>,</span><br><span class="line">    content - type: <span class="string">"application/json charset=utf-8"</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">"request success ! "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@requestMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(@requestBody String userName, @requestBody String pwd)</span> </span>&#123;</span><br><span class="line">    System.out.println(userName + <span class="string">" ："</span> + pwd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将JSON字符串中的两个变量的值分别赋予了两个字符串</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong>对象解析：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/something"</span>, method = RequestMethod.PUT)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">    System.out.println(user.userName + <span class="string">" ："</span> + user.pwd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将JSON字符串中的值赋予user中对应的属性上</span></span><br></pre></td></tr></table></figure><p>注：</p><ul><li><code>JSON</code>字符串中的<code>key</code>必须对应<code>user</code>中的<strong>属性名</strong>，否则是请求不过去的</li><li><code>@RequestBody</code>最多只能有一个，而<code>@RequestParam()</code>可以有多个</li></ul><p><br></p><h5 id="SessionAttributes"><a href="#SessionAttributes" class="headerlink" title="@SessionAttributes"></a><code>@SessionAttributes</code></h5><p>用来绑定<code>HttpSession</code>中的<code>attribute</code>对象的值，便于在方法中的参数里使用。该注解有<code>value、types</code>两个属性，可以通过名字和类型指定要使用的<code>attribute</code> 对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/editPet.do"</span>)</span><br><span class="line"><span class="comment">// @SessionAttributes("pet")</span></span><br><span class="line"><span class="meta">@SessionAttributes</span>(value = &#123; <span class="string">"pet"</span> &#125;, types = &#123; Integer.class &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EditPetForm</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：<code>@SessionAttributes</code>注解只能在类上使用，不能在方法上使用</p><p><br></p><h5 id="ModelAttribute、-RequestAttribute"><a href="#ModelAttribute、-RequestAttribute" class="headerlink" title="@ModelAttribute、@RequestAttribute"></a><code>@ModelAttribute、@RequestAttribute</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">beforeInvokingHandlerMethod</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    request.setAttribute(<span class="string">"foo"</span>, <span class="string">"hello world"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/data/custom"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">String <span class="title">custom</span><span class="params">(@RequestAttribute(<span class="string">"foo"</span>)</span> String foo) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Got 'foo' request attribute value '"</span> + foo + <span class="string">"'"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"customArgs"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Custom Resolvable Web Arguments<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"customArg"</span> <span class="attr">class</span>=<span class="string">"textLink"</span> <span class="attr">href</span>=<span class="string">"/data/custom"</span>&gt;</span>Custom<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"a.textLink"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> link = $(<span class="keyword">this</span>);</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: link.attr(<span class="string">"href"</span>),</span><br><span class="line">        dataType: <span class="string">"text"</span>,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">            alert(text)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Got &apos;foo&apos; request attribute value &apos;hello world&apos;</span><br></pre></td></tr></table></figure><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> MVC </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jar-MANIFEST.MF文件</title>
      <link href="/endBlogs/2019/03/15/jar-MANIFEST-MF%E6%96%87%E4%BB%B6/"/>
      <url>/endBlogs/2019/03/15/jar-MANIFEST-MF%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>打开Java的<code>JAR文件</code>我们经常可以看到文件中包含着一个<code>META-INF目录</code>， 这个目录下会有一些文件，其中必有一个<code>MANIFEST.MF</code>，这个文件描述了该<code>Jar文件</code>的很多信息。</p><p>下面将详细介绍<code>MANIFEST.MF文件</code>的内容，先来看<code>struts.jar</code>中包含的<code>MANIFEST.MF</code>文件内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: 1.0</span><br><span class="line">Created-By: Apache Ant 1.5.1</span><br><span class="line">Extension-Name: Struts Framework</span><br><span class="line">Specification-Title: Struts Framework</span><br><span class="line">Specification-Vendor: Apache Software Foundation</span><br><span class="line">Specification-Version: 1.1</span><br><span class="line">Implementation-Title: Struts Framework</span><br><span class="line">Implementation-Vendor: Apache Software Foundation</span><br><span class="line">Implementation-Vendor-Id: org.apache</span><br><span class="line">Implementation-Version: 1.1</span><br><span class="line">Class-Path:  commons-beanutils.jar commons-collections.jar commons-digester.jar</span><br></pre></td></tr></table></figure><a id="more"></a><p><br></p><h4 id="一般属性"><a href="#一般属性" class="headerlink" title="一般属性"></a>一般属性</h4><ol><li><p><code>Manifest-Version</code> </p><p>用来定义<code>manifest文件</code>的版本，例如：<code>Manifest-Version: 1.0</code> </p></li><li><p><code>Created-By</code> </p><p>   声明该文件的生成者，一般该属性是由jar命令行工具生成的，例如：<code>Created-By: Apache Ant 1.5.1</code> </p></li><li><p><code>Signature-Version</code> ：定义jar文件的签名版本</p></li><li><p><code>Class-Path</code> ：应用程序或者类装载器使用该值来构建内部的类搜索路径</p></li></ol><p><br></p><h4 id="应用程序相关属性"><a href="#应用程序相关属性" class="headerlink" title="应用程序相关属性"></a>应用程序相关属性</h4><ol><li><p><code>Main-Class</code> </p><p>定义<code>jar文件</code>的入口类，该类必须是一个可执行的类，一旦定义了该属性即可通过<code>java -jar x.jar</code>来运行该<code>jar文件</code>。</p></li></ol><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> jar </tag>
            
            <tag> MANIFEST.MF </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>maven配置</title>
      <link href="/endBlogs/2019/03/15/maven%E9%85%8D%E7%BD%AE/"/>
      <url>/endBlogs/2019/03/15/maven%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>Maven 提倡使用一个共同的标准目录结构，Maven 使用约定优于配置的原则，大家尽可能的遵守这样的目录结构。如下所示：</p><table><thead><tr><th style="text-align:left">目录</th><th style="text-align:left">目的</th></tr></thead><tbody><tr><td style="text-align:left">${basedir}</td><td style="text-align:left"><strong>存放pom.xml和所有的子目录</strong></td></tr><tr><td style="text-align:left">${basedir}/src/main/java</td><td style="text-align:left"><strong>项目的java源代码 </strong></td></tr><tr><td style="text-align:left">${basedir}/src/main/resources</td><td style="text-align:left"><strong>项目的资源，比如说property文件，springmvc.xml</strong></td></tr><tr><td style="text-align:left">${basedir}/src/test/java</td><td style="text-align:left">项目的测试类，比如说Junit代码</td></tr><tr><td style="text-align:left">${basedir}/src/test/resources</td><td style="text-align:left">测试用的资源</td></tr><tr><td style="text-align:left">${basedir}/src/main/webapp/WEB-INF</td><td style="text-align:left"><strong>web应用文件目录，web项目的信息，比如存放web.xml、本地图片、jsp视图页面</strong></td></tr><tr><td style="text-align:left">${basedir}/target</td><td style="text-align:left"><strong>打包输出目录</strong></td></tr><tr><td style="text-align:left">${basedir}/target/classes</td><td style="text-align:left">编译输出目录</td></tr><tr><td style="text-align:left">${basedir}/target/test-classes</td><td style="text-align:left">测试编译输出目录</td></tr><tr><td style="text-align:left">Test.java</td><td style="text-align:left">Maven只会自动运行符合该命名规则的测试类</td></tr><tr><td style="text-align:left">~/.m2/repository</td><td style="text-align:left"><strong>Maven默认的本地仓库目录位置</strong></td></tr></tbody></table><p><br></p><a id="more"></a><h4 id="修改默认的本地仓库"><a href="#修改默认的本地仓库" class="headerlink" title="修改默认的本地仓库"></a>修改默认的本地仓库</h4><p>Maven 本地仓库默认被创建在 <code>%USER_HOME%</code>目录下。要修改默认位置，在 <code>%M2_HOME%\conf</code>目录中的 Maven 的 <code>settings.xml</code>文件中定义另一个路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0 </span></span></span><br><span class="line"><span class="tag"><span class="string">   http://maven.apache.org/xsd/settings-1.0.0.xsd"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>C:/MyLocalRepository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>maven-pom配置</title>
      <link href="/endBlogs/2019/03/15/maven-pom%E9%85%8D%E7%BD%AE/"/>
      <url>/endBlogs/2019/03/15/maven-pom%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p><code>POM</code>是项目对象模型(<code>Project Object Model</code>)的简称,它是<code>Maven项目</code>中的文件。</p><p><br></p><h4 id="maven的协作相关属性"><a href="#maven的协作相关属性" class="headerlink" title="maven的协作相关属性"></a>maven的协作相关属性</h4><p>一个<code>pom.xml</code>的定义必须包含<code>modelVersion</code>、<code>groupId</code>、<code>artifactId</code>和<code>version</code>这四个元素，当然这其中的元素也是可以从它的父项目中继承的。使用groupdId:artifactId:version`的形式来唯一确定一个项目。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span>  </span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>  </span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0  </span></span></span><br><span class="line"><span class="tag"><span class="string">                      http://maven.apache.org/maven-v4_0_0.xsd"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        含义：组织标识，定义了项目属于哪个组</span></span><br><span class="line"><span class="comment">        用途：此名称则是本地仓库中的路径</span></span><br><span class="line"><span class="comment">        例如：otowa.user.dao，在M2_REPO目录下，将是: otowa/user/dao目录</span></span><br><span class="line"><span class="comment">        命名规范:项目名称，模块，子模块</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>otowa.user.dao<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        含义：项目名称，定义当前Maven项目在组中唯一的ID</span></span><br><span class="line"><span class="comment">        用途：例如：user-dao，在M2_REPO目录下，将是：otowa/user/dao/user-dao目录</span></span><br><span class="line"><span class="comment">        命名规范:唯一就好</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>user-dao<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        含义：项目当前的版本号</span></span><br><span class="line"><span class="comment">        用途：例如：0.0.1-SNAPSHOT</span></span><br><span class="line"><span class="comment">在M2_REPO目录下，将是：otowa/user/dao/user-dao/0.0.1-SNAPSHOT目录</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 打包的格式，可以为：pom , jar , maven-plugin , ejb , war , ear , rar , par --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 元素声明了一个对用户更为友好的项目名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br></p><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 定义本项目的依赖关系 --&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">     <span class="comment">&lt;!-- 每个dependency都对应这一个jar包 --&gt;</span>  </span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.winner.trade<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>trade-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">         <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">maven认为，程序对外部的依赖会随着程序的所处阶段和应用场景而变化</span></span><br><span class="line"><span class="comment">所以maven中的依赖关系有作用域(scope)的限制。 </span></span><br><span class="line"><span class="comment">--&gt;</span>  </span><br><span class="line">         </span><br><span class="line">         <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">scope包含如下的取值：compile（编译范围）、provided（已提供范围）</span></span><br><span class="line"><span class="comment">runtime（运行时范围）、test（测试范围）、system（系统范围） </span></span><br><span class="line"><span class="comment">--&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">         <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">设置指依赖是否可选，默认为false,即子项目默认都继承:为true</span></span><br><span class="line"><span class="comment">则子项目必需显示的引入，与dependencyManagement里定义的依赖类似  </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">optional</span>&gt;</span>false<span class="tag">&lt;/<span class="name">optional</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">         <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">屏蔽依赖关系。 比如项目中使用的libA依赖某个库的1.0版，</span></span><br><span class="line"><span class="comment">libB依赖某个库的2.0版，现在想统一使用2.0版，就应该屏蔽掉对1.0版的依赖 </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br></p><h4 id="定义常量"><a href="#定义常量" class="headerlink" title="定义常量"></a>定义常量</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 为pom定义一些常量，在pom中的其它地方可以直接引用 使用方式 如下 ：$&#123;file.encoding&#125; --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">file.encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">file.encoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.source.version</span>&gt;</span>1.5<span class="tag">&lt;/<span class="name">java.source.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.target.version</span>&gt;</span>1.5<span class="tag">&lt;/<span class="name">java.target.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> maven </tag>
            
            <tag> pom </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jar包</title>
      <link href="/endBlogs/2019/03/15/jar%E5%8C%85/"/>
      <url>/endBlogs/2019/03/15/jar%E5%8C%85/</url>
      <content type="html"><![CDATA[<h3 id="一、制作只含有字节码文件的jar包"><a href="#一、制作只含有字节码文件的jar包" class="headerlink" title="一、制作只含有字节码文件的jar包"></a>一、制作只含有字节码文件的jar包</h3><p>我们先来看只含有字节码文件，即只含有<code>.class文件</code>的<code>jar包</code>怎么制作，这是最简单的形式</p><h5 id="1、最简单的jar包——直接输出hello"><a href="#1、最简单的jar包——直接输出hello" class="headerlink" title="1、最简单的jar包——直接输出hello"></a>1、最简单的jar包——直接输出hello</h5><p>最终生成的jar包结构</p><blockquote><p>META-INF</p><p>Hello.class</p></blockquote><p>方法步骤</p><p>（1）用记事本写一个<code>Hello.java</code>的文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] agrs)</span></span>&#123;</span><br><span class="line">   System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）用命令行进入到该目录下，编译这个文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac Hello.java</span><br></pre></td></tr></table></figure><p>（3）将编译后的<code>Hello.class</code>文件打成<code>jar包</code> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jar -cvf hello.jar Hello.class</span><br></pre></td></tr></table></figure><ul><li><p><code>c</code> 表示要创建一个新的<code>jar包</code> </p></li><li><p><code>v</code> 表示创建的过程中在控制台输出创建过程的一些信息</p></li><li><p><code>f</code> 表示给生成的<code>jar包命名</code> </p></li></ul><p>（4）运行jar包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -jar hello.jar</span><br><span class="line"># 这时会报如下错误  hello.jar中没有主清单属性</span><br></pre></td></tr></table></figure><p>（5）添加<code>Main-Class</code>属性</p><p>用压缩软件打开<code>hello.jar</code>，会发现里面多了一个<code>META-INF</code>文件夹，里面有一个<code>MENIFEST.MF</code>的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: 1.0</span><br><span class="line">Created-By: 1.8.0_121 (Oracle Corporation)</span><br></pre></td></tr></table></figure><p>添加<code>Main-Class: Hello</code> ，再次运行<code>java -jar hello.jar</code> ，此时成功在控制台看到 <code>hello</code> </p><a id="more"></a><p><br></p><h5 id="2、含有两个类的jar包——通过调用输出hello"><a href="#2、含有两个类的jar包——通过调用输出hello" class="headerlink" title="2、含有两个类的jar包——通过调用输出hello"></a>2、含有两个类的jar包——通过调用输出hello</h5><p>最终生成的jar包结构</p><blockquote><p>META-INF</p><p>Tom.class</p><p>Hello.class</p></blockquote><p>（1）用记事本写一个Hello.java和一个Tom.java的文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] agrs)</span> </span>&#123;</span><br><span class="line">   System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tom</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）编译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac Hello.java</span><br></pre></td></tr></table></figure><p>此时<code>Hello.java</code>和<code>Tom.java</code>同时被编译，因为<code>Hello</code>中调用了<code>Tom</code> </p><p>（3）打jar包，这次我们换一种方式<strong>直接定义<code>Main-Class</code></strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: 1.0</span><br><span class="line">Created-By: 1.8.0_121 (Oracle Corporation)</span><br><span class="line">Main-Class: Hello</span><br></pre></td></tr></table></figure><p>事先准备好上述的<code>MENIFEST.MF文件</code>，并存放在<code>META-INF文件夹</code>下，此时打jar包的命令如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jar -cvfm hello.jar META-INF\MENIFEST.MF Hello.class Tom.class</span><br></pre></td></tr></table></figure><p>该命令表示用第一个文件当做<code>MENIFEST.MF文件</code>，<code>hello.jar</code>作为名称，将<code>Hello.class</code>和<code>Tom.class</code>打成jar包。其中多了一个参数<code>m</code>，表示要定义<code>MENIFEST文件</code> </p><p>（4）运行 <code>java -jar hello.jar</code> ，此时成功在控制台看到  hello ，成功</p><p><br></p><h5 id="3、有目录结构的jar包——通过引包并调用输出hello"><a href="#3、有目录结构的jar包——通过引包并调用输出hello" class="headerlink" title="3、有目录结构的jar包——通过引包并调用输出hello"></a>3、有目录结构的jar包——通过引包并调用输出hello</h5><p>最终生成的jar包结构</p><blockquote><p>META-INF</p><p>com</p><p>​    Tom.class</p><p>Hello.class</p></blockquote><p>我们将上一个稍稍变化一下，将<code>Tom类</code>放在<code>com包</code>下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">package com;</span><br><span class="line"># Tom.java需要在第一行声明自己的包名</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import com.Tom;</span><br><span class="line"># Hello.java需要引入Tom这个类</span><br></pre></td></tr></table></figure><p>（1）编译<code>Hello.java</code></p><p>（2）打jar包，同样准备好<code>MENIFEST文件</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jar -cvfm hello.jar META-INF\MENIFEST.MF Hello.class com </span><br><span class="line"># 最后一个com表示把文件夹下的所有文件都打进jar包</span><br></pre></td></tr></table></figure><p>（3）运行 <code>java -jar hello.jar</code>  ，此时成功在控制台看到  <code>hello</code> ，成功</p><p>（4）优化过程</p><p>我们注意到，<code>com包</code>下是有<code>Tom.java</code>源文件的，也被打进了jar包里，这样不太好，能不能优化一下<code>javac命令</code>，使所有的编译后文件编译到另一个隔离的地方呢，答案是可以的。</p><p>在编译<code>Hello.java</code>时，先新建一个<code>target文件夹</code>。然后我们用如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javac Hello.java -d target</span><br><span class="line"># 将所有编译后的文件，都放到target文件夹下</span><br></pre></td></tr></table></figure><p>将<code>META-INF文件夹</code>也复制到<code>target目录</code>下，<strong>进入这个目录</strong>，输入如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jar -cvfm hello.jar META-INF\MENIFEST.MF * </span><br><span class="line"># 最后一个位置变成了*，表示把当前目录下所有文件都打在jar包里</span><br></pre></td></tr></table></figure><p><br></p><p><a href="https://www.cnblogs.com/mq0036/p/8566427.html#a11" target="_blank" rel="noopener">原文</a> </p>]]></content>
      
      
        <tags>
            
            <tag> jar </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java类加载器</title>
      <link href="/endBlogs/2019/03/15/java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/"/>
      <url>/endBlogs/2019/03/15/java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/</url>
      <content type="html"><![CDATA[<h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><p>类加载器负责将<code>.class文件</code>加载到内存中，并为类生成一个<code>java.lang.Class</code>实例。</p><p>一旦一个类被加载入<code>JVM</code>中，同一个类就不会被再次加入了。在<code>JVM</code>中用来判断类的唯一性标识是：<strong>类名、类所在的包名和类加载器</strong>。</p><p>当<code>JVM</code>启动时，会形成由三个类加载器组成的初始类加载器层次结构：</p><ul><li><code>BootStrap ClassLoader</code>：根类加载器</li><li><code>Extension ClassLoader</code>：扩展类加载器</li><li><code>System ClassLoader</code>：系统类加载器</li></ul><a id="more"></a><p><br></p><h5 id="根类加载器-（bootstrap-class-loader）："><a href="#根类加载器-（bootstrap-class-loader）：" class="headerlink" title="根类加载器 （bootstrap class loader）："></a>根类加载器 （bootstrap class loader）：</h5><p>它用来加载 Java 的核心库(<code>jre/lib/rt.jar</code>)，是用原生<code>C++</code>代码来实现的，并不继承自<code>java.lang.ClassLoader</code>。<strong>没有父加载器</strong> </p><p><br></p><h5 id="扩展类加载器（extensions-class-loader）："><a href="#扩展类加载器（extensions-class-loader）：" class="headerlink" title="扩展类加载器（extensions class loader）："></a>扩展类加载器（extensions class loader）：</h5><p>它用来加载 Java 的扩展库(<code>jre/ext/*.jar</code>)。Java 虚拟机的实现会提供一个扩展库目录。该类加载器在此目录里面查找并加载 Java 类。 <strong>父加载器为根类加载器</strong> </p><p>扩展类加载器是纯Java类，是<strong>java.lang.ClassLoader</strong>类的子类</p><p><br></p><h5 id="系统类加载器（system-class-loader）："><a href="#系统类加载器（system-class-loader）：" class="headerlink" title="系统类加载器（system class loader）："></a>系统类加载器（system class loader）：</h5><p>它根据 Java 应用的类路径（<code>CLASSPATH</code>）来加载 Java 类。一般来说，Java 应用的类都是由它来完成加载的。可以通过 <code>ClassLoader.getSystemClassLoader()</code>来获取它。<strong>父加载器为扩展类加载器 </strong> </p><p>系统类加载器是纯Java类，是<strong>java.lang.ClassLoader</strong>类的子类</p><p><br></p><h5 id="自定义类加载器（custom-class-loader）："><a href="#自定义类加载器（custom-class-loader）：" class="headerlink" title="自定义类加载器（custom class loader）："></a>自定义类加载器（custom class loader）：</h5><p>除了系统提供的类加载器以外，开发人员可以通过继承 <code>java.lang.ClassLoader</code>类的方式实现自己的类加载器，以满足一些特殊的需求。</p><p><br></p><h3 id="类加载的父委托机制"><a href="#类加载的父委托机制" class="headerlink" title="类加载的父委托机制"></a>类加载的父委托机制</h3><p>从<code>JDK 1.2</code>版本开始，类的加载过程采用<strong>父亲委托机制</strong>，这种机制能更好地保证Java平台的安全。</p><p>在父委托机制中，除了Java虚拟机自带的<strong>根类加载器</strong>以外，其余的类加载器都<strong>有且只有一个</strong>父加载器，各个加载器按照父子关系形成了树形结构。</p><p>当Java程序请求<code>加载器loader1</code>加载<code>Sample类</code>时，<code>loader1</code>首先委托自己的父加载器去加载<code>Sample类</code>，若父加载器能加载，则由父加载器完成加载任务，否则才由<code>loader1</code>本身加载<code>Sample类</code>。</p><p>注：</p><ul><li><p><strong>这里的父加载器概念并不是指类的继承关系，子加载器不一定继承了父加载器（其实是组合的关系）</strong> </p></li><li><p><strong>每个加载器都优先尝试用父类加载，若父类不能加载则自己尝试加载；若成功则返回Class对象给子类，若失败则告诉子类让子类自己加载。所有都失败则抛出<code>ClassNotFoundException</code>异常</strong> </p></li></ul>]]></content>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> ClassLoader </tag>
            
            <tag> 类加载器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Elasticsearch使用</title>
      <link href="/endBlogs/2019/03/11/Elasticsearch%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/endBlogs/2019/03/11/Elasticsearch%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/intro.html" target="_blank" rel="noopener">文档</a> </p><p><br></p><h4 id="面向文档"><a href="#面向文档" class="headerlink" title="面向文档"></a>面向文档</h4><p>通常，应用程序中的<strong>对象拥有复杂的数据结构</strong>，可能包括<strong>日期</strong>、<strong>地理信息</strong>、<strong>其他对象</strong>或者<strong>数组</strong>等。如果要把这些对象存储在<strong>关系型数据库</strong>中，相当于是把一个表现力丰富的对象挤压到一个非常大的电子表格中：你必须<strong>将对象扁平化来适应表结构</strong>，而且又不得不在每次查询时重新构造对象：</p><ul><li>一个简单字段<strong>对应一列</strong> </li><li>一个对象字段需要<strong>新建表、引用主键</strong> </li><li>一个数组字段需要<strong>新建表、引用主键、每个数组元素对应一行</strong>  </li></ul><p><code>Elasticsearch</code>使用<code>JavaScript Object Notation</code>或者<code>JSON</code>作为文档的序列化格式。<code>JSON</code>序列化被大多数编程语言所支持，并且已经成为 <code>NoSQL</code>领域的标准格式。</p><p>注：文档 =》对象</p><p><br></p><h4 id="请求格式"><a href="#请求格式" class="headerlink" title="请求格式"></a>请求格式</h4><p>一个<code>Elasticsearch</code>请求和任何<code>HTTP</code>请求一样由若干相同的部件组成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X &lt;VERB&gt; &apos;&lt;PROTOCOL&gt;://&lt;HOST&gt;:&lt;PORT&gt;/&lt;PATH&gt;?&lt;QUERY_STRING&gt;&apos; -d &apos;&lt;BODY&gt;&apos;</span><br></pre></td></tr></table></figure><p>被 <code>&lt; &gt;</code> 标记的部件：</p><table><thead><tr><th>参数</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td><code>VERB</code></td><td style="text-align:left">适当的 HTTP <em>方法</em> 或 <em>谓词</em> : <code>GET</code>、 <code>POST</code>、 <code>PUT</code>、 <code>HEAD</code> 或者 <code>DELETE</code></td></tr><tr><td><code>PROTOCOL</code></td><td style="text-align:left"><code>http</code> 或者 <code>https</code></td></tr><tr><td><code>HOST</code></td><td style="text-align:left">Elasticsearch 集群中任意节点的主机名</td></tr><tr><td><code>PORT</code></td><td style="text-align:left">运行 Elasticsearch HTTP 服务的端口号，默认是 <code>9200</code> 。</td></tr><tr><td><code>PATH</code></td><td style="text-align:left">API 的终端路径，由<code>index、type、id</code> 等组成</td></tr><tr><td><code>QUERY_STRING</code></td><td style="text-align:left">任意可选的查询字符串参数，<code>?pretty</code> 将格式化地输出 JSON 返回值</td></tr><tr><td><code>BODY</code></td><td style="text-align:left">一个 JSON 格式的请求体 (如果请求需要的话)</td></tr></tbody></table><p>例如，计算集群中文档的数量，我们可以用这个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET &apos;http://localhost:9200/_count?pretty&apos; -d &apos;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p><br></p><h4 id="搜索格式"><a href="#搜索格式" class="headerlink" title="搜索格式"></a>搜索格式</h4><ul><li><p>搜索所有<code>type</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /megacorp/employee/_search</span><br></pre></td></tr></table></figure><p>注：使用 <code>_search</code>代替具体的<code>id</code> </p></li><li><p>参数搜索</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查询字符串</span><br><span class="line">GET /megacorp/employee/_search?q=last_name:Smith</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># match 查询</span><br><span class="line">GET /megacorp/employee/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot; : &#123;</span><br><span class="line">        &quot;match&quot; : &#123;</span><br><span class="line">            &quot;last_name&quot; : &quot;Smith&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># filter 过滤器</span><br><span class="line">GET /megacorp/employee/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot; : &#123;</span><br><span class="line">        &quot;bool&quot;: &#123;</span><br><span class="line">            &quot;must&quot;: &#123;</span><br><span class="line">                &quot;match&quot; : &#123;</span><br><span class="line">                    &quot;last_name&quot; : &quot;smith&quot; </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;filter&quot;: &#123;</span><br><span class="line">                &quot;range&quot; : &#123;</span><br><span class="line">                    &quot;age&quot; : &#123; &quot;gt&quot; : 30 &#125; </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># match_phrase 查询</span><br><span class="line">GET /megacorp/employee/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot; : &#123;</span><br><span class="line">        &quot;match_phrase&quot; : &#123;</span><br><span class="line">            &quot;about&quot; : &quot;rock climbing&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
            <tag> ES </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java知识</title>
      <link href="/endBlogs/2019/03/07/java%E7%9F%A5%E8%AF%86/"/>
      <url>/endBlogs/2019/03/07/java%E7%9F%A5%E8%AF%86/</url>
      <content type="html"><![CDATA[<h4 id="类名与文件名"><a href="#类名与文件名" class="headerlink" title="类名与文件名"></a>类名与文件名</h4><ul><li>一个<code>Java</code>文件中只能有一个<code>public</code>类</li><li>如果文件中存在<code>public</code>类，文件名必须与<code>public</code>类名一致</li><li>如果文件中没有<code>public</code>类，文件名与类名可以不一致</li></ul><p>注：一个源文件中，用<code>class关键字</code>定义了几个类，编译的时候就会产生几个<code>字节码</code>文件</p><a id="more"></a><p><br></p><h4 id="包名与文件名"><a href="#包名与文件名" class="headerlink" title="包名与文件名"></a>包名与文件名</h4><p><code>.java文件</code>中的<strong>包名</strong>必须与<strong>物理文件夹</strong>对应</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Something.java 文件</span></span><br><span class="line"><span class="keyword">package</span> net.java.util;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Something</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>物理存储位置</strong>应该是：<code>net/java/util/Something.java</code> </p><p>注：</p><ul><li>同一个包中的类名字不能相同 </li><li><strong>同级包</strong>下的类引用不需要<code>import</code>，可以直接调用</li><li><code>Java</code>编译器默认导入<code>java.lang</code>包 </li></ul><p><br></p><h4 id="主入口方法"><a href="#主入口方法" class="headerlink" title="主入口方法"></a>主入口方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><ol><li><code>该java类</code>由<code>java虚拟机</code>调用，所以<code>java类</code>应把该方法暴露，故用<code>public</code> </li><li>既然由<code>JVM</code>调用该方法，肯定不能new 一个对象再由对象调用该方法，应直接由<code>JVM</code>调用故用<code>static</code> </li><li>给<code>JVM</code>返回东西是无意义的 ，故用<code>void</code> </li><li>括号里的参数是由<code>JVM</code>传给该方法的，具体可为：<ul><li>从<code>cmd控制台</code>传入</li><li>从开发环境<code>IDE</code>配置参数传入</li></ul></li></ol><p><br></p><h4 id="装箱与拆箱"><a href="#装箱与拆箱" class="headerlink" title="装箱与拆箱"></a>装箱与拆箱</h4><p>所有的包装类<strong>（Integer、Long、Byte、Double、Float、Short）</strong>都是抽象类 <code>Number</code> 的子类。 </p><p>由编译器特别支持的包装称为<strong>装箱</strong>，所以当内置数据类型被当作对象使用的时候，编译器会<strong>把内置类型装箱为包装类</strong>。相似的，编译器也可以<strong>把一个对象拆箱为内置类型</strong> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">      Integer x = <span class="number">5</span>;</span><br><span class="line">      x =  x + <span class="number">10</span>;</span><br><span class="line">      System.out.println(x); </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当 x 被赋为整型值时，由于x是一个对象，所以编译器要对x进行装箱</span></span><br><span class="line"><span class="comment">// 然后，为了使x能进行加运算，所以要对x进行拆箱</span></span><br></pre></td></tr></table></figure><p><br></p><h4 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataType[] arrayRefVar = new dataType[arraySize];</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataType[] arrayRefVar = &#123;value0, value1, ..., valuek&#125;;</span><br></pre></td></tr></table></figure><p><br></p><h4 id="重写与重载"><a href="#重写与重载" class="headerlink" title="重写与重载"></a>重写与重载</h4><p><code>重写(Override)</code>是子类对父类的允许访问的方法的实现过程进行重新编写, <strong>返回值</strong>和<strong>形参</strong>都不能改变</p><p><code>重载(overloading)</code> 是在一个类里面，<strong>方法名字</strong>相同，而<strong>参数</strong>不同，返回类型可以相同也可以不同</p><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
